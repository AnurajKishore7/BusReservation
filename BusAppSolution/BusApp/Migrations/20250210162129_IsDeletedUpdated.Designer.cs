// <auto-generated />
using System;
using BusReservationApp.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250210162129_IsDeletedUpdated")]
    partial class IsDeletedUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusApp.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TripId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BusApp.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BusType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("OperatorId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.ToTable("Buses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusNo = "TN01AB1234",
                            BusType = "AC Sleeper",
                            OperatorId = 1,
                            TotalSeats = 40
                        });
                });

            modelBuilder.Entity("BusApp.Models.BusRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<string>("EstimatedDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BusRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Destination = "Kanyakumari",
                            Distance = 750,
                            EstimatedDuration = "12:30",
                            Source = "Chennai"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDiabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "+911234567890",
                            DOB = new DateOnly(2002, 7, 11),
                            Email = "anuraj@gmail.com",
                            Gender = "Male",
                            IsDiabled = false,
                            Name = "Anuraj"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentMadeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BusApp.Models.TicketPassenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SeatNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("TicketPassengers");
                });

            modelBuilder.Entity("BusApp.Models.TransportOperator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("TransportOperators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "+919876543210",
                            Email = "smartbus@gmail.com",
                            Name = "SmartBus"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("BusRouteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("BusRouteId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalTime = new DateTime(2025, 2, 10, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            BusId = 1,
                            BusRouteId = 1,
                            DepartureTime = new DateTime(2025, 2, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 700m
                        });
                });

            modelBuilder.Entity("BusApp.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Email = "admin@gmail.com",
                            CreatedAt = new DateTime(2025, 2, 10, 21, 51, 29, 180, DateTimeKind.Local).AddTicks(9384),
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Super Admin",
                            PasswordHash = new byte[] { 89, 71, 75, 68, 177, 235, 156, 199, 162, 219, 204, 54, 60, 197, 126, 237, 73, 143, 11, 79, 78, 203, 18, 114, 173, 46, 192, 61, 37, 15, 160, 14, 190, 188, 249, 81, 87, 254, 235, 245, 210, 185, 208, 95, 153, 4, 128, 184, 189, 115, 15, 87, 96, 72, 200, 136, 128, 182, 28, 129, 232, 6, 24, 202 },
                            PasswordSalt = new byte[] { 16, 252, 110, 184, 4, 80, 165, 171, 27, 110, 82, 12, 152, 165, 194, 232, 28, 100, 22, 81, 46, 0, 160, 197, 225, 65, 222, 225, 63, 187, 18, 104, 243, 180, 118, 121, 123, 238, 179, 125, 110, 57, 182, 125, 209, 89, 95, 74, 153, 114, 37, 13, 72, 84, 97, 218, 88, 35, 230, 2, 208, 183, 146, 200, 240, 82, 221, 1, 64, 189, 74, 187, 182, 179, 36, 124, 64, 135, 202, 172, 54, 232, 43, 41, 201, 47, 156, 90, 154, 18, 36, 88, 18, 144, 185, 166, 24, 59, 2, 84, 151, 198, 86, 236, 171, 90, 148, 249, 179, 180, 20, 227, 200, 14, 187, 123, 46, 254, 164, 176, 96, 115, 251, 95, 70, 211, 239, 112 },
                            Role = "Admin"
                        },
                        new
                        {
                            Email = "smartbus@gmail.com",
                            CreatedAt = new DateTime(2025, 2, 10, 21, 51, 29, 180, DateTimeKind.Local).AddTicks(9387),
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Smart Bus",
                            PasswordHash = new byte[] { 119, 1, 142, 61, 5, 88, 235, 205, 57, 210, 99, 36, 46, 57, 111, 90, 101, 61, 12, 71, 53, 155, 31, 95, 190, 218, 169, 154, 254, 201, 165, 143, 93, 114, 84, 244, 215, 245, 56, 144, 117, 65, 9, 73, 63, 34, 3, 33, 250, 87, 142, 185, 215, 24, 126, 183, 148, 88, 177, 35, 100, 70, 38, 89 },
                            PasswordSalt = new byte[] { 108, 111, 103, 116, 60, 222, 47, 19, 118, 129, 247, 173, 197, 78, 89, 4, 196, 47, 104, 146, 165, 85, 32, 73, 56, 155, 111, 44, 20, 253, 195, 157, 229, 179, 24, 98, 27, 1, 158, 23, 153, 200, 202, 250, 220, 100, 164, 221, 121, 84, 12, 206, 1, 136, 105, 79, 224, 148, 123, 91, 222, 89, 169, 188, 170, 171, 52, 36, 220, 163, 93, 28, 188, 30, 122, 9, 162, 177, 119, 185, 238, 194, 164, 156, 52, 86, 162, 245, 49, 123, 237, 233, 183, 74, 179, 56, 206, 110, 110, 64, 188, 228, 177, 109, 13, 90, 42, 21, 35, 108, 45, 88, 66, 235, 224, 88, 110, 249, 200, 200, 234, 215, 197, 238, 211, 214, 21, 23 },
                            Role = "TransportOperator"
                        },
                        new
                        {
                            Email = "anuraj@gmail.com",
                            CreatedAt = new DateTime(2025, 2, 10, 21, 51, 29, 180, DateTimeKind.Local).AddTicks(9390),
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Anuraj",
                            PasswordHash = new byte[] { 248, 18, 95, 147, 137, 243, 206, 230, 73, 179, 192, 46, 83, 152, 167, 231, 45, 10, 237, 17, 232, 193, 45, 58, 121, 240, 55, 134, 91, 25, 29, 224, 209, 177, 41, 177, 206, 64, 106, 199, 63, 118, 163, 224, 199, 71, 114, 86, 209, 103, 140, 32, 139, 126, 63, 57, 131, 56, 159, 143, 234, 96, 251, 51 },
                            PasswordSalt = new byte[] { 104, 128, 50, 233, 200, 200, 192, 3, 202, 25, 93, 242, 42, 162, 129, 111, 175, 70, 129, 234, 82, 50, 71, 140, 7, 46, 118, 160, 65, 72, 235, 57, 216, 109, 223, 161, 86, 23, 223, 194, 187, 121, 78, 212, 98, 206, 22, 58, 102, 228, 240, 115, 123, 41, 120, 40, 168, 117, 115, 20, 90, 73, 131, 15, 138, 136, 108, 25, 199, 5, 97, 239, 13, 243, 133, 157, 60, 86, 20, 185, 125, 18, 123, 0, 17, 213, 170, 223, 235, 42, 118, 152, 176, 192, 61, 3, 31, 96, 92, 164, 203, 207, 160, 137, 175, 133, 142, 176, 46, 237, 249, 3, 91, 238, 180, 213, 0, 250, 247, 7, 225, 5, 8, 101, 230, 110, 189, 220 },
                            Role = "Client"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Booking", b =>
                {
                    b.HasOne("BusApp.Models.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusApp.Models.Trip", "Trip")
                        .WithMany("Bookings")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("BusApp.Models.Bus", b =>
                {
                    b.HasOne("BusApp.Models.TransportOperator", "TransportOperator")
                        .WithMany("Buses")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportOperator");
                });

            modelBuilder.Entity("BusApp.Models.Client", b =>
                {
                    b.HasOne("BusApp.Models.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("BusApp.Models.Client", "Email")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusApp.Models.Payment", b =>
                {
                    b.HasOne("BusApp.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("BusApp.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BusApp.Models.TicketPassenger", b =>
                {
                    b.HasOne("BusApp.Models.Booking", "Booking")
                        .WithMany("TicketPassengers")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BusApp.Models.TransportOperator", b =>
                {
                    b.HasOne("BusApp.Models.User", "User")
                        .WithOne("TransportOperator")
                        .HasForeignKey("BusApp.Models.TransportOperator", "Email")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusApp.Models.Trip", b =>
                {
                    b.HasOne("BusApp.Models.Bus", "Bus")
                        .WithMany("Trips")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusApp.Models.BusRoute", "BusRoute")
                        .WithMany("Trips")
                        .HasForeignKey("BusRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("BusRoute");
                });

            modelBuilder.Entity("BusApp.Models.Booking", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("TicketPassengers");
                });

            modelBuilder.Entity("BusApp.Models.Bus", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("BusApp.Models.BusRoute", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("BusApp.Models.Client", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BusApp.Models.TransportOperator", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("BusApp.Models.Trip", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BusApp.Models.User", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("TransportOperator");
                });
#pragma warning restore 612, 618
        }
    }
}
