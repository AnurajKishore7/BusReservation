// <auto-generated />
using System;
using BusReservationApp.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250219053746_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusApp.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TripId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BusApp.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BusType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("OperatorId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.ToTable("Buses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusNo = "TN01AB1234",
                            BusType = "AC Sleeper",
                            OperatorId = 1,
                            TotalSeats = 40
                        },
                        new
                        {
                            Id = 2,
                            BusNo = "TN01AB1235",
                            BusType = "non-AC Seater",
                            OperatorId = 1,
                            TotalSeats = 40
                        });
                });

            modelBuilder.Entity("BusApp.Models.BusRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<string>("EstimatedDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BusRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Destination = "Kanyakumari",
                            Distance = 750,
                            EstimatedDuration = "12:30",
                            Source = "Chennai"
                        },
                        new
                        {
                            Id = 2,
                            Destination = "Chennai",
                            Distance = 750,
                            EstimatedDuration = "12:30",
                            Source = "Kanyakumari"
                        },
                        new
                        {
                            Id = 3,
                            Destination = "Bangalore",
                            Distance = 350,
                            EstimatedDuration = "06:00",
                            Source = "Chennai"
                        },
                        new
                        {
                            Id = 4,
                            Destination = "Chennai",
                            Distance = 350,
                            EstimatedDuration = "06:00",
                            Source = "Bangalore"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "+911234567890",
                            DOB = new DateOnly(2002, 7, 11),
                            Email = "anuraj@gmail.com",
                            Gender = "Male",
                            IsDeleted = false,
                            IsDisabled = false,
                            Name = "Anuraj"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentMadeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BusApp.Models.TicketPassenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SeatNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("TicketPassengers");
                });

            modelBuilder.Entity("BusApp.Models.TransportOperator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("TransportOperators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "+919876543210",
                            Email = "smartbus@gmail.com",
                            IsDeleted = false,
                            Name = "SmartBus"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("BusRouteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("BusRouteId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalTime = new DateTime(2025, 2, 10, 20, 30, 0, 0, DateTimeKind.Unspecified),
                            BusId = 1,
                            BusRouteId = 1,
                            DepartureTime = new DateTime(2025, 2, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 700m
                        },
                        new
                        {
                            Id = 2,
                            ArrivalTime = new DateTime(2025, 2, 10, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            BusId = 2,
                            BusRouteId = 3,
                            DepartureTime = new DateTime(2025, 2, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 350m
                        });
                });

            modelBuilder.Entity("BusApp.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Email = "admin@gmail.com",
                            CreatedAt = new DateTime(2025, 2, 19, 11, 7, 45, 737, DateTimeKind.Local).AddTicks(2499),
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Super Admin",
                            PasswordHash = new byte[] { 135, 89, 179, 178, 87, 181, 95, 146, 213, 209, 219, 173, 6, 207, 171, 18, 126, 231, 141, 72, 161, 119, 25, 86, 94, 95, 157, 155, 148, 145, 128, 7, 32, 3, 79, 119, 79, 33, 129, 155, 2, 52, 97, 97, 63, 240, 161, 153, 33, 188, 40, 240, 249, 182, 243, 180, 27, 171, 171, 152, 92, 156, 1, 229 },
                            PasswordSalt = new byte[] { 126, 202, 212, 226, 243, 172, 167, 31, 139, 161, 216, 55, 27, 165, 243, 204, 76, 220, 176, 214, 77, 40, 78, 242, 212, 200, 111, 0, 58, 101, 17, 75, 82, 235, 92, 154, 63, 160, 234, 157, 214, 213, 143, 164, 41, 128, 202, 105, 123, 172, 162, 113, 9, 59, 214, 185, 103, 159, 102, 239, 253, 173, 16, 34, 121, 245, 230, 95, 17, 87, 253, 211, 14, 189, 61, 22, 189, 84, 199, 140, 131, 18, 172, 157, 89, 243, 38, 62, 155, 85, 199, 247, 97, 74, 126, 236, 76, 43, 148, 16, 73, 146, 252, 240, 60, 4, 130, 31, 128, 95, 106, 26, 43, 208, 121, 104, 243, 254, 230, 253, 214, 106, 193, 137, 243, 27, 34, 69 },
                            Role = "Admin"
                        },
                        new
                        {
                            Email = "smartbus@gmail.com",
                            CreatedAt = new DateTime(2025, 2, 19, 11, 7, 45, 737, DateTimeKind.Local).AddTicks(2501),
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Smart Bus",
                            PasswordHash = new byte[] { 127, 242, 60, 50, 7, 36, 123, 248, 118, 137, 188, 212, 191, 76, 229, 108, 119, 20, 5, 213, 210, 53, 206, 95, 191, 109, 20, 221, 74, 210, 45, 78, 112, 196, 203, 197, 131, 178, 230, 190, 41, 8, 243, 183, 5, 149, 210, 163, 85, 202, 114, 151, 156, 181, 91, 50, 132, 233, 52, 60, 5, 228, 228, 106 },
                            PasswordSalt = new byte[] { 140, 89, 237, 31, 135, 84, 156, 114, 190, 60, 29, 36, 223, 53, 2, 236, 74, 124, 110, 47, 44, 150, 242, 21, 56, 68, 165, 183, 201, 173, 17, 116, 184, 33, 248, 251, 43, 74, 48, 97, 248, 198, 138, 235, 120, 14, 249, 102, 38, 73, 18, 26, 81, 46, 133, 114, 73, 107, 19, 142, 242, 114, 169, 66, 190, 191, 90, 131, 31, 160, 143, 192, 231, 61, 201, 11, 62, 92, 76, 37, 82, 194, 185, 118, 206, 129, 136, 158, 155, 20, 239, 61, 34, 85, 199, 242, 217, 133, 195, 77, 123, 138, 71, 190, 221, 178, 200, 77, 143, 74, 42, 240, 52, 132, 155, 236, 227, 42, 181, 87, 106, 3, 170, 135, 117, 180, 183, 128 },
                            Role = "TransportOperator"
                        },
                        new
                        {
                            Email = "anuraj@gmail.com",
                            CreatedAt = new DateTime(2025, 2, 19, 11, 7, 45, 737, DateTimeKind.Local).AddTicks(2503),
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Anuraj",
                            PasswordHash = new byte[] { 236, 177, 207, 82, 244, 194, 155, 138, 166, 35, 96, 207, 187, 219, 244, 137, 142, 236, 98, 244, 14, 24, 120, 4, 190, 230, 202, 39, 142, 213, 171, 219, 172, 139, 206, 86, 6, 156, 231, 226, 107, 51, 245, 241, 0, 81, 165, 152, 108, 247, 116, 27, 44, 253, 180, 133, 76, 102, 126, 167, 178, 220, 215, 136 },
                            PasswordSalt = new byte[] { 180, 180, 156, 75, 144, 109, 79, 133, 61, 141, 220, 151, 221, 193, 204, 126, 158, 191, 107, 150, 195, 206, 133, 87, 82, 58, 95, 53, 121, 170, 152, 49, 228, 66, 191, 99, 176, 37, 151, 33, 41, 172, 11, 40, 60, 18, 22, 73, 6, 182, 140, 228, 245, 134, 41, 195, 26, 65, 131, 136, 124, 45, 244, 104, 179, 225, 44, 231, 200, 21, 124, 83, 125, 139, 52, 20, 145, 53, 127, 161, 111, 110, 112, 28, 199, 65, 8, 47, 27, 57, 240, 242, 117, 55, 138, 4, 255, 144, 247, 123, 102, 36, 93, 227, 164, 168, 35, 134, 47, 97, 198, 162, 184, 101, 46, 221, 253, 92, 91, 132, 42, 82, 26, 170, 61, 28, 69, 86 },
                            Role = "Client"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Booking", b =>
                {
                    b.HasOne("BusApp.Models.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusApp.Models.Trip", "Trip")
                        .WithMany("Bookings")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("BusApp.Models.Bus", b =>
                {
                    b.HasOne("BusApp.Models.TransportOperator", "TransportOperator")
                        .WithMany("Buses")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportOperator");
                });

            modelBuilder.Entity("BusApp.Models.Client", b =>
                {
                    b.HasOne("BusApp.Models.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("BusApp.Models.Client", "Email")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusApp.Models.Payment", b =>
                {
                    b.HasOne("BusApp.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("BusApp.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BusApp.Models.TicketPassenger", b =>
                {
                    b.HasOne("BusApp.Models.Booking", "Booking")
                        .WithMany("TicketPassengers")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BusApp.Models.TransportOperator", b =>
                {
                    b.HasOne("BusApp.Models.User", "User")
                        .WithOne("TransportOperator")
                        .HasForeignKey("BusApp.Models.TransportOperator", "Email")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusApp.Models.Trip", b =>
                {
                    b.HasOne("BusApp.Models.Bus", "Bus")
                        .WithMany("Trips")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusApp.Models.BusRoute", "BusRoute")
                        .WithMany("Trips")
                        .HasForeignKey("BusRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("BusRoute");
                });

            modelBuilder.Entity("BusApp.Models.Booking", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("TicketPassengers");
                });

            modelBuilder.Entity("BusApp.Models.Bus", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("BusApp.Models.BusRoute", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("BusApp.Models.Client", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BusApp.Models.TransportOperator", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("BusApp.Models.Trip", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BusApp.Models.User", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("TransportOperator");
                });
#pragma warning restore 612, 618
        }
    }
}
