// <auto-generated />
using System;
using BusReservationApp.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusApp.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TripId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BusApp.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BusType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("OperatorId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.ToTable("Buses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusNo = "TN01AB1234",
                            BusType = "AC Sleeper",
                            OperatorId = 1,
                            TotalSeats = 40
                        });
                });

            modelBuilder.Entity("BusApp.Models.BusRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<string>("EstimatedDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BusRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Destination = "Kanyakumari",
                            Distance = 750,
                            EstimatedDuration = "12:30",
                            Source = "Chennai"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDiabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "+911234567890",
                            DOB = new DateOnly(2002, 7, 11),
                            Email = "anuraj@gmail.com",
                            Gender = "Male",
                            IsDiabled = false,
                            Name = "Anuraj"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentMadeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BusApp.Models.TicketPassenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SeatNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("TicketPassengers");
                });

            modelBuilder.Entity("BusApp.Models.TransportOperator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("TransportOperators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "+919876543210",
                            Email = "smartbus@gmail.com",
                            Name = "SmartBus"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("BusRouteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("BusRouteId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalTime = new DateTime(2025, 2, 10, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            BusId = 1,
                            BusRouteId = 1,
                            DepartureTime = new DateTime(2025, 2, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 700m
                        });
                });

            modelBuilder.Entity("BusApp.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Email = "admin@gmail.com",
                            CreatedAt = new DateTime(2025, 2, 9, 16, 21, 59, 120, DateTimeKind.Local).AddTicks(6041),
                            IsApproved = true,
                            Name = "Super Admin",
                            PasswordHash = new byte[] { 40, 48, 20, 199, 224, 166, 9, 212, 97, 205, 247, 145, 225, 230, 179, 69, 207, 111, 141, 171, 69, 143, 163, 188, 226, 227, 51, 82, 91, 54, 185, 245, 120, 174, 41, 168, 84, 255, 187, 192, 15, 89, 133, 70, 158, 78, 249, 45, 39, 22, 10, 243, 51, 236, 109, 249, 245, 213, 126, 228, 223, 153, 224, 196 },
                            PasswordSalt = new byte[] { 135, 59, 163, 43, 50, 117, 145, 249, 199, 246, 210, 225, 221, 188, 195, 106, 224, 175, 145, 165, 119, 147, 166, 125, 71, 132, 80, 132, 114, 248, 87, 233, 80, 176, 114, 235, 215, 121, 100, 214, 203, 192, 143, 194, 0, 153, 105, 149, 63, 229, 186, 85, 82, 237, 197, 173, 133, 38, 1, 81, 91, 173, 239, 125, 60, 104, 35, 124, 54, 187, 151, 199, 26, 211, 248, 199, 164, 154, 173, 163, 253, 25, 188, 162, 103, 111, 122, 254, 239, 138, 72, 184, 201, 175, 151, 89, 47, 160, 222, 112, 179, 16, 106, 179, 145, 248, 103, 187, 21, 249, 18, 123, 95, 253, 209, 247, 246, 204, 231, 20, 180, 165, 208, 78, 182, 180, 167, 71 },
                            Role = "SuperAdmin"
                        },
                        new
                        {
                            Email = "smartbus@gmail.com",
                            CreatedAt = new DateTime(2025, 2, 9, 16, 21, 59, 120, DateTimeKind.Local).AddTicks(6044),
                            IsApproved = true,
                            Name = "Smart Bus",
                            PasswordHash = new byte[] { 162, 55, 53, 101, 63, 6, 77, 165, 80, 175, 63, 2, 68, 92, 167, 186, 52, 47, 242, 186, 123, 78, 23, 7, 150, 16, 132, 161, 188, 180, 83, 154, 170, 60, 26, 100, 127, 88, 57, 141, 4, 117, 246, 78, 140, 233, 46, 84, 144, 86, 45, 88, 252, 222, 82, 5, 219, 15, 138, 94, 119, 248, 183, 209 },
                            PasswordSalt = new byte[] { 244, 95, 58, 227, 146, 5, 9, 57, 216, 241, 254, 144, 156, 131, 233, 29, 36, 5, 199, 68, 219, 57, 105, 6, 137, 99, 99, 242, 104, 236, 164, 13, 181, 189, 178, 195, 204, 137, 119, 189, 77, 193, 228, 46, 152, 228, 229, 117, 197, 190, 229, 30, 172, 147, 190, 228, 106, 22, 6, 93, 80, 173, 3, 234, 11, 26, 84, 34, 169, 171, 222, 46, 102, 148, 174, 220, 205, 184, 22, 17, 6, 189, 211, 146, 89, 70, 109, 67, 53, 146, 126, 62, 45, 2, 97, 153, 194, 162, 121, 149, 154, 31, 106, 202, 46, 174, 177, 132, 167, 100, 9, 237, 79, 190, 249, 232, 27, 99, 46, 192, 57, 89, 27, 142, 35, 233, 109, 78 },
                            Role = "TransportOperator"
                        },
                        new
                        {
                            Email = "anuraj@gmail.com",
                            CreatedAt = new DateTime(2025, 2, 9, 16, 21, 59, 120, DateTimeKind.Local).AddTicks(6046),
                            IsApproved = true,
                            Name = "Anuraj",
                            PasswordHash = new byte[] { 218, 111, 19, 127, 207, 248, 142, 20, 193, 131, 255, 145, 172, 128, 228, 179, 120, 183, 161, 161, 250, 95, 178, 150, 112, 104, 245, 187, 253, 250, 147, 51, 75, 155, 46, 96, 102, 39, 30, 136, 232, 78, 22, 222, 15, 10, 55, 12, 147, 13, 95, 179, 185, 48, 2, 164, 235, 99, 22, 162, 67, 214, 167, 229 },
                            PasswordSalt = new byte[] { 174, 28, 43, 202, 63, 240, 150, 235, 136, 60, 114, 38, 238, 192, 165, 121, 94, 18, 6, 28, 22, 237, 181, 89, 29, 122, 165, 150, 6, 231, 159, 48, 62, 160, 186, 50, 26, 130, 120, 140, 39, 192, 246, 177, 154, 167, 36, 193, 22, 143, 30, 58, 237, 19, 227, 109, 238, 105, 122, 173, 80, 20, 71, 33, 77, 218, 118, 218, 159, 2, 250, 166, 96, 127, 231, 122, 65, 240, 107, 216, 5, 21, 191, 224, 226, 158, 31, 100, 141, 97, 248, 8, 126, 127, 115, 37, 97, 36, 49, 43, 169, 194, 138, 8, 251, 34, 38, 148, 91, 61, 227, 142, 48, 89, 214, 132, 128, 93, 203, 69, 217, 197, 126, 46, 127, 71, 171, 109 },
                            Role = "Client"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Booking", b =>
                {
                    b.HasOne("BusApp.Models.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusApp.Models.Trip", "Trip")
                        .WithMany("Bookings")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("BusApp.Models.Bus", b =>
                {
                    b.HasOne("BusApp.Models.TransportOperator", "TransportOperator")
                        .WithMany("Buses")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportOperator");
                });

            modelBuilder.Entity("BusApp.Models.Client", b =>
                {
                    b.HasOne("BusApp.Models.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("BusApp.Models.Client", "Email")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusApp.Models.Payment", b =>
                {
                    b.HasOne("BusApp.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("BusApp.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BusApp.Models.TicketPassenger", b =>
                {
                    b.HasOne("BusApp.Models.Booking", "Booking")
                        .WithMany("TicketPassengers")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BusApp.Models.TransportOperator", b =>
                {
                    b.HasOne("BusApp.Models.User", "User")
                        .WithOne("TransportOperator")
                        .HasForeignKey("BusApp.Models.TransportOperator", "Email")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusApp.Models.Trip", b =>
                {
                    b.HasOne("BusApp.Models.Bus", "Bus")
                        .WithMany("Trips")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusApp.Models.BusRoute", "BusRoute")
                        .WithMany("Trips")
                        .HasForeignKey("BusRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("BusRoute");
                });

            modelBuilder.Entity("BusApp.Models.Booking", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("TicketPassengers");
                });

            modelBuilder.Entity("BusApp.Models.Bus", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("BusApp.Models.BusRoute", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("BusApp.Models.Client", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BusApp.Models.TransportOperator", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("BusApp.Models.Trip", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BusApp.Models.User", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("TransportOperator");
                });
#pragma warning restore 612, 618
        }
    }
}
